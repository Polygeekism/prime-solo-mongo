Create a collection named orders.
db.createCollection(‘orders');

Insert at least 3 documents that represent orders. IMPORTANT: See section below for fields. Order dates should be: 2017-02-03, 2017-04-04, 2017-01-02
db.orders.insert({orderDate: ‘2017-02—03', orderTotal: 58.64, lineItems:[{unitPrice: 14.99, quantity: 4, productName:'Hat'}, {unitPrice:59.99, quantity:1, productName:'Madden 2018’}]});
db.orders.insert({orderDate: ‘2017-04-04', orderTotal: 130.67, lineItems:[{unitPrice: 40.00, quantity: 1, productName:’pants'}]});
db.orders.insert({orderDate: ‘2017-01-02', orderTotal: 130.67, lineItems:[{unitPrice: 24.99, quantity: 1, productName:'shirt'}, {unitPrice:59.99, quantity:1, productName:'Forza 7'}]});

Find all orders and make them look pretty.
db.orders.find().pretty();

Find all orders with an orderDate that is after 1/31/2017.
orders.find({‘orderDate':{$gt:'2017-01-31'}});

Change the orderTotal from 2/3/2017 to 63 dollars (you do NOT have to ensure the lineItems' unitPrice * quantity add up to the orderTotal)
orders.update({'orderDate': '2017-02-03'},{$set:{'orderTotal': 63}});

Add another lineItem to the order from 4/4/2017
orders.update({'orderDate':'2017-04-04'},{$push:{'lineItems':{unitPrice: 38.90, quantity: 3, productName:'Ninja Turtles'}}});

Change the first lineItem in the order from 1/2/2017 to be for 2 'transistor radio’s
orders.update({orderDate: '2017-01-02'}, {$set:{‘lineItems.0':{unitPrice: 14.99, quantity: 2, productName:'transistor radio'}}});

Find orders with lineItems that have a quantity that is less than 10, but greater than 2. You will have to research $and
orders.find({$and:[{'lineItems.quantity':{$lt:10}},{'lineItems.quantity':{$gt:2}}]})
